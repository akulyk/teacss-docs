<!DOCTYPE html><html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></meta><title>TeaCSS</title><link rel='stylesheet' type='text/css' href='assets/style.css'></head><body><div id="header"><div><a href="index.htm">Intro</a><a class="active" href="build.htm">Using as a build system</a><a href="canvas.htm">Canvas</a><a href="https://github.com/boomyjee/teacss/zipball/master" target="_blank">Download</a></div></div><div id="content"><section><h1>Using as a build system</h1><p>Using teacss to create build files in pretty simple.
It is convinient to have only one entry point for your styles.
And it is already handled in teacss using <b>@import</b>.</p><p>Would it be nice to have the same thing for your scripts? For sure.</p><p>Some script managers already exist. For example RequireJS and StealJS.
AFAIK these are the only two that also handle minification and creating production versions.</p><p>As to me they have some flaws.</p><ul><li>They both leave api specific calls inside production file. StealJS has 'pluginify' build type but it is quite buggy.</li><li>RequireJS does not handle CSS.</li><li>StealJS does not support CSS embedding and there is no option for output file name (only production.*)</li><li>StealJS has some path problems in production version and there is no way to reconfigure that.</li></ul><p>Some of those problems have their roots in asyncronous web nature.
You cannot just write <b>require('module_name')</b> and use it.</p><p>The solution is to use some kind of makefile. TeaCSS introduces as new keyword <b>Script</b>.</p><p>And <b>@append</b> goes to the scenes. All JS code imported with <b>@append</b> is assumed as needed for production,
so it will be bundled into release file.</p><h3>Example tea "makefile"</h3><pre class='cm-s-default'><span class='cm-comment_line'></span><span class='cm-comment'>// make.tea</span><span>
</span><span class='cm-scope'>Script</span><span class='cm-rule'> my_filename </span><span class='cm-scope_start'>{</span><span>
</span><span class='cm-blank'>    </span><span class='cm-comment_line'></span><span class='cm-comment'>// jquery</span><span>
</span><span class='cm-blank'>    </span><span class='cm-append_start'>@append</span><span class='cm-append'> &quot;scripts/jquery.js&quot;</span><span class='cm-nop'>;</span><span>
</span><span class='cm-blank'>    </span><span class='cm-append_start'>@append</span><span class='cm-append'> &quot;scripts/jquery.plugin.js&quot;</span><span class='cm-nop'>;</span><span>
</span><span class='cm-blank'>    </span><span class='cm-comment_line'></span><span class='cm-comment'>// app</span><span>
</span><span class='cm-blank'>    </span><span class='cm-append_start'>@append</span><span class='cm-append'> &quot;scripts/app.js&quot;</span><span class='cm-nop'>;</span><span>
</span><span class='cm-blank'>    </span><span class='cm-append_start'>@append</span><span class='cm-append'> </span><span></span><span class='cm-scope_start'>{</span><span>
</span><span class='cm-blank'>        </span><span></span><span class='cm-rule'>var x = 5+3</span><span></span><span class='cm-nop'>;</span><span class='cm-blank'> </span><span class='cm-comment_line'></span><span class='cm-comment'>// some plain js</span><span>
</span><span class='cm-blank'>    </span><span class='cm-scope_end'>}</span><span>
</span><span class='cm-scope_end'>}</span><span>
</span><span class='cm-comment_line'></span><span class='cm-comment'>// styles</span><span>
</span><span class='cm-append_start'>@append</span><span class='cm-append'> &quot;style/jquery.plugin.css&quot;</span><span class='cm-nop'>;</span><span>
</span><span class='cm-rule'>@</span><span></span><span class='cm-rule'>imp–ært </span><span class='cm-string'>&quot;some_teacss_stylesheet.tea&quot;</span><span></span><span class='cm-nop'>;</span><span>
</span></pre><p>Instead of creating lots of script and link tags you can use only one entry point for your application.</p><pre class='cm-s-default'><span class='cm-tag'>&lt;link</span><span> </span><span class='cm-attribute'>tea</span><span>=</span><span class='cm-string'>&quot;make.tea&quot;</span><span class='cm-tag'>&gt;</span><span>
</span></pre><p>Later, using build script you can get <b>my_filename.js</b> file that contains jquery.js, jquery.plugin.js and app.js. Minified and compressed.</p><p>You can also save styles as described in <a href="index.htm">Intro section</a></p></section></div></body></html>